#--------------------Assignment 15 ---------------

library(dplyr); library(corrplot);library(car); library(MASS)

# import train data set
Variant_1 <- read.csv("E:/Data Analytics with RET/Assignment/Dataset/fbtrain/Features_Variant_1.csv", header=FALSE)
Variant_2 <- read.csv("E:/Data Analytics with RET/Assignment/Dataset/fbtrain/Features_Variant_2.csv", header=FALSE)
Variant_3 <- read.csv("E:/Data Analytics with RET/Assignment/Dataset/fbtrain/Features_Variant_3.csv", header=FALSE)
Variant_4 <- read.csv("E:/Data Analytics with RET/Assignment/Dataset/fbtrain/Features_Variant_4.csv", header=FALSE)
Variant_5 <- read.csv("E:/Data Analytics with RET/Assignment/Dataset/fbtrain/Features_Variant_5.csv", header=FALSE)
fbtrain <- rbind(Variant_1, Variant_2, Variant_3, Variant_4, Variant_5)
dim(fbtrain)

# import test data set
setwd("E:/Data Analytics with RET/Assignment/Dataset/fbtest")
test1 <- read.csv("Test_Case_1.csv", header = F); test2 <- read.csv("Test_Case_2.csv", header = F)
test3 <- read.csv("Test_Case_3.csv", header = F); test4 <- read.csv("Test_Case_4.csv", header = F)
test5 <- read.csv("Test_Case_5.csv", header = F); test6 <- read.csv("Test_Case_6.csv", header = F)
test7 <- read.csv("Test_Case_7.csv", header = F); test8 <- read.csv("Test_Case_8.csv", header = F)
test9 <- read.csv("Test_Case_9.csv", header = F); test10 <- read.csv("Test_Case_10.csv", header = F)
fbtest  <- rbind(test1, test2, test3, test4, test5, test6, test7, test8, test9, test10)
dim(fbtest)

# Assign variable names to the train and test data set
colnames(fbtrain) <- c("plikes","checkin","talking","category","d5","d6","d7","d8","d9","d10","d11","d12",
                    "d13","d14","d15","d16","d17","d18","d19","d20","d21","d22","d23","d24","d25","d26",
                    "d27","d28","d29","cc1","cc2","cc3","cc4","cc5","basetime","postlength","postshre",
                    "postpromo","Hhrs","sun","mon","tue","wed","thu","fri","sat","basesun","basemon",
                    "basetue","basewed","basethu","basefri","basesat","target")
colnames(fbtest) <- c("plikes","checkin","talking","category","d5","d6","d7","d8","d9","d10","d11","d12",
                      "d13","d14","d15","d16","d17","d18","d19","d20","d21","d22","d23","d24","d25","d26",
                      "d27","d28","d29","cc1","cc2","cc3","cc4","cc5","basetime","postlength","postshre",
                      "postpromo","Hhrs","sun","mon","tue","wed","thu","fri","sat","basesun","basemon",
                      "basetue","basewed","basethu","basefri","basesat","target")

dim(fbtrain); dim(fbtest) 
View(fbtrain); View(fbtest)
str(fbtrain); str(fbtest)

train <- fbtrain; test <- fbtest
head(train); head(test)

distinct(train)   # removing overlapping observations if any
dim(train)
colSums(is.na(train)) # no missing values

library(outliers)
train_out <- rm.outlier(train, fill = TRUE, median = TRUE)
colSums(is.na(train_out))
# Predict the no of comments in next H hrs

TARGET <- lm(target~., data = train_out[,-38])
library(MASS)
#step <- stepAIC(TARGET, direction = "both")

final_model <- lm(target ~ plikes + checkin + talking + d5 + d6 + d7 + d9 + d10 + 
                    d11 + d12 + d13 + d15 + d18 + d19 + d20 + d22 + d24 + d26 + 
                    d27 + d28 + cc1 + cc2 + cc3 + cc4 + basetime + postshre + 
                    Hhrs, data = train_out)
summary(final_model)

# f. Fine tune the model and represent important features

final_model <- lm(target ~ plikes + checkin + talking + d5 + d6 + d7 + d9 + d10 + 
                    d11 + d12 + d13 + d18 + d19 + d20 + d22 + d24 + d26 + 
                    d27 + d28 + cc1 + cc2 + cc3 + cc4 + basetime + postshre + 
                    Hhrs, data = train_out)
summary(final_model)


prediction <- predict(final_model, test)

predicted <- data.frame(cbind(actuals = test$target, prediction = prediction))
cor(predicted)
View(predicted)
predicted$prediction <- ifelse(prediction<0, 0, prediction)
cor(predicted)

# test accuracy
min_max_accuracy <- mean(apply(predicted, 1, min) / apply(predicted, 1, max)) 
min_max_accuracy 

# training accuracy
prediction <- predict(final_model, train)
predicted <- data.frame(cbind(actuals = train$target, prediction = abs(prediction)))

min_max_accuracy <- mean(apply(predicted, 1, min) / apply(predicted, 1, max)) 
min_max_accuracy 
